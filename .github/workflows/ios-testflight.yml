name: iOS Build and TestFlight (Capacitor)

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'App version (e.g. 1.0.0)'
        required: false
      buildNumber:
        description: 'Build number (defaults to current timestamp)'
        required: false

jobs:
  build-and-upload:
    runs-on: macos-14

    env:
      NODE_VERSION: '20'
      # Used by Fastlane API key auth
      APP_STORE_CONNECT_API_KEY_ID: ${{ secrets.APP_STORE_CONNECT_API_KEY_ID }}
      APP_STORE_CONNECT_API_ISSUER_ID: ${{ secrets.APP_STORE_CONNECT_API_ISSUER_ID }}
      APP_STORE_CONNECT_API_KEY_CONTENT: ${{ secrets.APP_STORE_CONNECT_API_KEY_CONTENT }}
      # Optional: bundle identifier if you want to override in CI
      BUNDLE_ID: ${{ secrets.IOS_BUNDLE_ID }}
      APP_NAME: ${{ secrets.IOS_APP_NAME }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install Node dependencies
        run: |
          if [ -f bun.lockb ]; then
            echo "Detected bun.lockb, but GitHub macOS image doesn't ship bun. Falling back to npm ci."
          fi
          npm ci

      - name: Build web app
        run: |
          npm run build

      - name: Ensure Capacitor is initialized
        run: |
          npx --yes @capacitor/cli cap --version
          if [ ! -f capacitor.config.ts ] && [ ! -f capacitor.config.json ] && [ ! -f capacitor.config.js ]; then
            APP_NAME_CI=${APP_NAME:-UniTracker}
            BUNDLE_ID_CI=${BUNDLE_ID:-com.example.unitracker}
            npx cap init "$APP_NAME_CI" "$BUNDLE_ID_CI" --web-dir=dist --npm-client npm --skip-dependencies
          fi

      - name: Add iOS platform (if missing) and sync
        run: |
          npx cap add ios || true
          npx cap sync ios

      - name: Set Xcode version (toolchain)
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: '15.4'

      - name: Set up Ruby and Fastlane
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.2'
          bundler-cache: true

      - name: Install Fastlane (if Gemfile not present)
        if: ${{ !exists('Gemfile') }}
        run: |
          gem install fastlane --no-document

      - name: Install CocoaPods
        run: |
          sudo gem install cocoapods --no-document

      - name: Pod install (iOS)
        working-directory: ios/App
        run: |
          pod repo update
          pod install

      - name: Prepare Fastlane API key file
        run: |
          mkdir -p fastlane
          echo "{\"key_id\":\"$APP_STORE_CONNECT_API_KEY_ID\",\"issuer_id\":\"$APP_STORE_CONNECT_API_ISSUER_ID\",\"key\":\"$APP_STORE_CONNECT_API_KEY_CONTENT\",\"in_house\":false}" > fastlane/appstore_api_key.json

      - name: Build and upload to TestFlight
        env:
          VERSION: ${{ github.event.inputs.version }}
          BUILD_NUMBER: ${{ github.event.inputs.buildNumber }}
        run: |
          # If a Gemfile exists, use bundle exec
          if [ -f Gemfile ]; then
            bundle exec fastlane ios build_and_upload version:"${VERSION}" build_number:"${BUILD_NUMBER}"
          else
            fastlane ios build_and_upload version:"${VERSION}" build_number:"${BUILD_NUMBER}"
          fi

      - name: Upload artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ios-artifacts
          path: |
            build/*.ipa
            build/*.xcarchive
            ios/App/build/**/*.ipa
            ios/App/build/**/*.xcarchive
